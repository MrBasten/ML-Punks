{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "gfpLb6KDjoHu",
        "WNrgQ7kEoD-Y"
      ],
      "authorship_tag": "ABX9TyNds3m0BHbrMtNBaxzORixg",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MrBasten/ML-Punks/blob/main/Prediction%20of%20pressure%20on%20the%20surface\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Импорт библиотек"
      ],
      "metadata": {
        "id": "eWYYc8afZsVn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import tensorflow\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from tensorflow.keras import models, layers"
      ],
      "metadata": {
        "id": "q8uL5VGmZs91"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Вариант 5"
      ],
      "metadata": {
        "id": "DGMQ0pFlNPq4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from tensorflow.keras import models, layers, callbacks\n",
        "from tensorflow.keras.applications import ResNet50\n",
        "from tensorflow.keras.layers import BatchNormalization\n",
        "import tensorflow as tf\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def load_data(file_path):\n",
        "    df = pd.read_csv(file_path)\n",
        "\n",
        "    if df.empty:\n",
        "        raise ValueError(\"Empty dataframe\")\n",
        "\n",
        "    required_columns = ['X', 'Y', 'Z', 'flowVelocity', 'PressureValue']\n",
        "\n",
        "    if not set(required_columns).issubset(df.columns):\n",
        "        raise ValueError(f\"Missing required columns: {', '.join(required_columns)}\")\n",
        "\n",
        "    Xtrain = df[['X', 'Y', 'Z', 'flowVelocity']].astype(int).values\n",
        "    Ytrain = df['PressureValue'].astype(int).values\n",
        "\n",
        "    return Xtrain, Ytrain\n",
        "\n",
        "def normalize_data(Xtrain):\n",
        "    mean = np.mean(Xtrain, axis=0)\n",
        "    std = np.std(Xtrain, axis=0)\n",
        "    Xtrain_normalized = (Xtrain - mean) / std\n",
        "    return Xtrain_normalized, mean, std\n",
        "\n",
        "def build_model():\n",
        "    model = models.Sequential([\n",
        "        layers.Dense(1024, input_dim=4, activation='relu'),\n",
        "        layers.Dense(2048, activation='relu'),\n",
        "        layers.Dropout(0.2),\n",
        "        layers.Dense(512, activation='relu'),\n",
        "        layers.Dropout(0.2),\n",
        "        layers.Dense(256, activation='relu'),\n",
        "        layers.Dense(128, activation='relu'),\n",
        "        layers.Dropout(0.2),\n",
        "        layers.Dense(64, activation='relu'),\n",
        "        layers.Dense(32, activation='relu'),\n",
        "        layers.Dropout(0.1),\n",
        "        layers.Dense(16, activation='relu'),\n",
        "        layers.Dense(8, activation='relu'),\n",
        "        layers.Dense(4, activation='relu'),\n",
        "        layers.Dense(1, activation='linear')\n",
        "    ])\n",
        "\n",
        "    model.compile(loss='mean_squared_error', optimizer='adam')\n",
        "\n",
        "    return model\n",
        "\n",
        "def train_model(model, Xtrain, Ytrain, epochs=5, test_size=0.25, batch_size=1024):\n",
        "    x_train, x_test, y_train, y_test = train_test_split(Xtrain, Ytrain, test_size=test_size)\n",
        "\n",
        "    history = model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test), verbose=1, shuffle=True)\n",
        "\n",
        "    return model, history\n",
        "\n",
        "def evaluate_predictions(predictions, actual_values):\n",
        "    mse = mean_squared_error(actual_values, predictions)\n",
        "    print(\"MSE of the neural network:\", mse)\n",
        "\n",
        "def plot_history(history):\n",
        "    plt.plot(history.history['loss'])\n",
        "    plt.plot(history.history['val_loss'])\n",
        "    plt.title('Model Loss')\n",
        "    plt.ylabel('Loss')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.legend(['Train', 'Validation'], loc='upper right')\n",
        "    plt.show()\n",
        "\n",
        "def evaluate_model(model, X, Y):\n",
        "    predictions = model.predict(X)\n",
        "    mse = mean_squared_error(Y, predictions)\n",
        "    print(\"MSE of the neural network on new data:\", mse)\n",
        "\n",
        "def save_weights(model, file_path):\n",
        "    model.save_weights(file_path)\n",
        "\n",
        "def load_weights(model, file_path):\n",
        "    model.load_weights(file_path)\n",
        "\n",
        "def summarize_results(results):\n",
        "    mean = np.mean(results)\n",
        "    std = np.std(results)\n",
        "    print(\"Mean:\", mean)\n",
        "    print(\"Standard Deviation:\", std)\n",
        "\n",
        "def main():\n",
        "    file_path = os.path.join('dataLuna_2V_true.csv')\n",
        "\n",
        "    try:\n",
        "        Xtrain, Ytrain = load_data(file_path)\n",
        "\n",
        "        # Normalize input data\n",
        "        Xtrain_normalized, mean, std = normalize_data(Xtrain)\n",
        "\n",
        "        # Split data into train and test sets\n",
        "        x_train, x_test, y_train, y_test = train_test_split(Xtrain_normalized, Ytrain, test_size=0.25, random_state=42)\n",
        "\n",
        "        # Build model\n",
        "        model = build_model()\n",
        "        # Train model\n",
        "        model, history = train_model(model, x_train, y_train, epochs=10, test_size=0.25, batch_size=1024)\n",
        "\n",
        "        # Evaluate model on train set\n",
        "        predictions = model.predict(x_test)\n",
        "        evaluate_predictions(predictions, y_test)\n",
        "\n",
        "        # Plot training history\n",
        "        plot_history(history)\n",
        "\n",
        "        # Save model weights\n",
        "        save_weights(model, 'model_weights.h5')\n",
        "\n",
        "        # Load model weights\n",
        "        model.load_weights('model_weights.h5')\n",
        "\n",
        "        # Evaluate model on new data\n",
        "        evaluate_model(model, x_test, y_test)\n",
        "\n",
        "        # Summarize model results\n",
        "        summarize_results(predictions)\n",
        "\n",
        "    except FileNotFoundError:\n",
        "        print(f\"File not found: {file_path}\")\n",
        "\n",
        "    except ValueError as e:\n",
        "        print(f\"Error: {str(e)}\")\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 923
        },
        "id": "HckYR_KTNTX7",
        "outputId": "a20523ef-bf82-4a65-e0c4-e43c477b57ae"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "331/331 [==============================] - 185s 553ms/step - loss: 923652800.0000 - val_loss: 221277360.0000\n",
            "Epoch 2/10\n",
            "331/331 [==============================] - 182s 550ms/step - loss: 150365664.0000 - val_loss: 381251136.0000\n",
            "Epoch 3/10\n",
            "331/331 [==============================] - 195s 590ms/step - loss: 134857744.0000 - val_loss: 445017312.0000\n",
            "Epoch 4/10\n",
            "331/331 [==============================] - 200s 604ms/step - loss: 127798336.0000 - val_loss: 473675936.0000\n",
            "Epoch 5/10\n",
            "331/331 [==============================] - 203s 612ms/step - loss: 121887368.0000 - val_loss: 562581440.0000\n",
            "Epoch 6/10\n",
            "331/331 [==============================] - 206s 622ms/step - loss: 116699864.0000 - val_loss: 666607296.0000\n",
            "Epoch 7/10\n",
            "331/331 [==============================] - 202s 611ms/step - loss: 111614520.0000 - val_loss: 756870528.0000\n",
            "Epoch 8/10\n",
            "331/331 [==============================] - 202s 609ms/step - loss: 108897280.0000 - val_loss: 691290112.0000\n",
            "Epoch 9/10\n",
            "331/331 [==============================] - 202s 609ms/step - loss: 105925512.0000 - val_loss: 808416000.0000\n",
            "Epoch 10/10\n",
            "331/331 [==============================] - 201s 607ms/step - loss: 103746368.0000 - val_loss: 767101440.0000\n",
            "4707/4707 [==============================] - 66s 14ms/step\n",
            "MSE of the neural network: 767776981.5516658\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4707/4707 [==============================] - 68s 14ms/step\n",
            "MSE of the neural network on new data: 767776981.5516658\n",
            "Mean: 69217.4\n",
            "Standard Deviation: 3556.9443\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "\n",
        "def load_model(file_path):\n",
        "    with open(file_path, 'rb') as f:\n",
        "        model = pickle.load(f)\n",
        "    return model\n",
        "\n",
        "# Загрузка модели\n",
        "loaded_model = load_model('model.pkl')\n",
        "\n",
        "# Save predictions and actual values as numpy arrays\n",
        "np.savetxt('predictions.txt', predictions)\n",
        "np.savetxt('actual_values.txt', y_test)\n",
        "\n",
        "# Save model history as numpy array\n",
        "np.savetxt('loss_history.txt', history.history['loss'])\n",
        "np.savetxt('val_loss_history.txt', history.history['val_loss'])\n"
      ],
      "metadata": {
        "id": "d4gsSdW2eSBA"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}